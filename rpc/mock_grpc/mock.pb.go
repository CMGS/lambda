// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	mock.proto

It has these top-level messages:
	DeployOptions
	RunAndWaitOptions
	RunAndWaitMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployOptions struct {
	Specs      string            `protobuf:"bytes,1,opt,name=specs" json:"specs,omitempty"`
	Appname    string            `protobuf:"bytes,2,opt,name=appname" json:"appname,omitempty"`
	Image      string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Podname    string            `protobuf:"bytes,4,opt,name=podname" json:"podname,omitempty"`
	Nodename   string            `protobuf:"bytes,5,opt,name=nodename" json:"nodename,omitempty"`
	Entrypoint string            `protobuf:"bytes,6,opt,name=entrypoint" json:"entrypoint,omitempty"`
	ExtraArgs  string            `protobuf:"bytes,7,opt,name=extra_args,json=extraArgs" json:"extra_args,omitempty"`
	CpuQuota   float64           `protobuf:"fixed64,8,opt,name=cpu_quota,json=cpuQuota" json:"cpu_quota,omitempty"`
	Count      int32             `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	Memory     int64             `protobuf:"varint,10,opt,name=memory" json:"memory,omitempty"`
	Env        []string          `protobuf:"bytes,11,rep,name=env" json:"env,omitempty"`
	Networks   map[string]string `protobuf:"bytes,12,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Raw        bool              `protobuf:"varint,13,opt,name=raw" json:"raw,omitempty"`
	Debug      bool              `protobuf:"varint,14,opt,name=debug" json:"debug,omitempty"`
	OpenStdin  bool              `protobuf:"varint,15,opt,name=openStdin" json:"openStdin,omitempty"`
}

func (m *DeployOptions) Reset()                    { *m = DeployOptions{} }
func (m *DeployOptions) String() string            { return proto.CompactTextString(m) }
func (*DeployOptions) ProtoMessage()               {}
func (*DeployOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeployOptions) GetSpecs() string {
	if m != nil {
		return m.Specs
	}
	return ""
}

func (m *DeployOptions) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *DeployOptions) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DeployOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *DeployOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *DeployOptions) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *DeployOptions) GetExtraArgs() string {
	if m != nil {
		return m.ExtraArgs
	}
	return ""
}

func (m *DeployOptions) GetCpuQuota() float64 {
	if m != nil {
		return m.CpuQuota
	}
	return 0
}

func (m *DeployOptions) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DeployOptions) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *DeployOptions) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *DeployOptions) GetNetworks() map[string]string {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *DeployOptions) GetRaw() bool {
	if m != nil {
		return m.Raw
	}
	return false
}

func (m *DeployOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *DeployOptions) GetOpenStdin() bool {
	if m != nil {
		return m.OpenStdin
	}
	return false
}

type RunAndWaitOptions struct {
	DeployOptions *DeployOptions `protobuf:"bytes,1,opt,name=DeployOptions,json=deployOptions" json:"DeployOptions,omitempty"`
	Cmd           []byte         `protobuf:"bytes,2,opt,name=Cmd,json=cmd,proto3" json:"Cmd,omitempty"`
}

func (m *RunAndWaitOptions) Reset()                    { *m = RunAndWaitOptions{} }
func (m *RunAndWaitOptions) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitOptions) ProtoMessage()               {}
func (*RunAndWaitOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunAndWaitOptions) GetDeployOptions() *DeployOptions {
	if m != nil {
		return m.DeployOptions
	}
	return nil
}

func (m *RunAndWaitOptions) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type RunAndWaitMessage struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RunAndWaitMessage) Reset()                    { *m = RunAndWaitMessage{} }
func (m *RunAndWaitMessage) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitMessage) ProtoMessage()               {}
func (*RunAndWaitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RunAndWaitMessage) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *RunAndWaitMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployOptions)(nil), "pb.DeployOptions")
	proto.RegisterType((*RunAndWaitOptions)(nil), "pb.RunAndWaitOptions")
	proto.RegisterType((*RunAndWaitMessage)(nil), "pb.RunAndWaitMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoreRPC service

type CoreRPCClient interface {
	RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error)
}

type coreRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoreRPCClient(cc *grpc.ClientConn) CoreRPCClient {
	return &coreRPCClient{cc}
}

func (c *coreRPCClient) RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[0], c.cc, "/pb.CoreRPC/RunAndWait", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRunAndWaitClient{stream}
	return x, nil
}

type CoreRPC_RunAndWaitClient interface {
	Send(*RunAndWaitOptions) error
	Recv() (*RunAndWaitMessage, error)
	grpc.ClientStream
}

type coreRPCRunAndWaitClient struct {
	grpc.ClientStream
}

func (x *coreRPCRunAndWaitClient) Send(m *RunAndWaitOptions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitClient) Recv() (*RunAndWaitMessage, error) {
	m := new(RunAndWaitMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CoreRPC service

type CoreRPCServer interface {
	RunAndWait(CoreRPC_RunAndWaitServer) error
}

func RegisterCoreRPCServer(s *grpc.Server, srv CoreRPCServer) {
	s.RegisterService(&_CoreRPC_serviceDesc, srv)
}

func _CoreRPC_RunAndWait_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreRPCServer).RunAndWait(&coreRPCRunAndWaitServer{stream})
}

type CoreRPC_RunAndWaitServer interface {
	Send(*RunAndWaitMessage) error
	Recv() (*RunAndWaitOptions, error)
	grpc.ServerStream
}

type coreRPCRunAndWaitServer struct {
	grpc.ServerStream
}

func (x *coreRPCRunAndWaitServer) Send(m *RunAndWaitMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitServer) Recv() (*RunAndWaitOptions, error) {
	m := new(RunAndWaitOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CoreRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CoreRPC",
	HandlerType: (*CoreRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunAndWait",
			Handler:       _CoreRPC_RunAndWait_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mock.proto",
}

func init() { proto.RegisterFile("mock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x95, 0x9b, 0x6d, 0x9b, 0x4c, 0x5b, 0xd8, 0xb5, 0x00, 0x59, 0xe5, 0x2b, 0xf4, 0x94, 0x53,
	0x85, 0xca, 0x01, 0xc4, 0x4a, 0x48, 0xab, 0xc2, 0x61, 0x91, 0xf8, 0x32, 0x07, 0x6e, 0x54, 0x6e,
	0x3c, 0xaa, 0xa2, 0x6e, 0x6c, 0xe3, 0x38, 0xbb, 0xe4, 0x17, 0xf3, 0x37, 0x90, 0x9d, 0xb4, 0xbb,
	0xdd, 0xde, 0xe6, 0xbd, 0x79, 0x79, 0xf3, 0x9c, 0x19, 0x80, 0x52, 0xe7, 0xdb, 0xb9, 0xb1, 0xda,
	0x69, 0xda, 0x33, 0xeb, 0xd9, 0xbf, 0x08, 0x26, 0x1f, 0xd1, 0x5c, 0xe9, 0xe6, 0x9b, 0x71, 0x85,
	0x56, 0x15, 0x7d, 0x04, 0xfd, 0xca, 0x60, 0x5e, 0x31, 0x92, 0x92, 0x2c, 0xe1, 0x2d, 0xa0, 0x0c,
	0x86, 0xc2, 0x18, 0x25, 0x4a, 0x64, 0xbd, 0xc0, 0xef, 0xa0, 0xd7, 0x17, 0xa5, 0xd8, 0x20, 0x8b,
	0x5a, 0x7d, 0x00, 0x5e, 0x6f, 0xb4, 0x0c, 0xfa, 0x93, 0x56, 0xdf, 0x41, 0x3a, 0x85, 0x58, 0x69,
	0x89, 0xa1, 0xd5, 0x0f, 0xad, 0x3d, 0xa6, 0x2f, 0x00, 0x50, 0x39, 0xdb, 0x18, 0x5d, 0x28, 0xc7,
	0x06, 0xa1, 0x7b, 0x87, 0xa1, 0xcf, 0x01, 0xf0, 0xaf, 0xb3, 0x62, 0x25, 0xec, 0xa6, 0x62, 0xc3,
	0xd0, 0x4f, 0x02, 0x73, 0x61, 0x37, 0x15, 0x7d, 0x0a, 0x49, 0x6e, 0xea, 0xd5, 0x9f, 0x5a, 0x3b,
	0xc1, 0xe2, 0x94, 0x64, 0x84, 0xc7, 0xb9, 0xa9, 0x7f, 0x78, 0xec, 0x73, 0xe6, 0xba, 0x56, 0x8e,
	0x25, 0x29, 0xc9, 0xfa, 0xbc, 0x05, 0xf4, 0x09, 0x0c, 0x4a, 0x2c, 0xb5, 0x6d, 0x18, 0xa4, 0x24,
	0x8b, 0x78, 0x87, 0xe8, 0x29, 0x44, 0xa8, 0xae, 0xd9, 0x28, 0x8d, 0xb2, 0x84, 0xfb, 0x92, 0x9e,
	0x43, 0xac, 0xd0, 0xdd, 0x68, 0xbb, 0xad, 0xd8, 0x38, 0x8d, 0xb2, 0xd1, 0xe2, 0xe5, 0xdc, 0xac,
	0xe7, 0x07, 0x3f, 0x6f, 0xfe, 0xb5, 0x53, 0x7c, 0xf2, 0x99, 0xf9, 0xfe, 0x03, 0x6f, 0x67, 0xc5,
	0x0d, 0x9b, 0xa4, 0x24, 0x8b, 0xb9, 0x2f, 0x7d, 0x1c, 0x89, 0xeb, 0x7a, 0xc3, 0x1e, 0x04, 0xae,
	0x05, 0xf4, 0x19, 0x24, 0xda, 0xa0, 0xfa, 0xe9, 0x64, 0xa1, 0xd8, 0xc3, 0xd0, 0xb9, 0x25, 0xa6,
	0xe7, 0x30, 0x39, 0x18, 0xe0, 0x6d, 0xb7, 0xd8, 0x74, 0x9b, 0xf2, 0xa5, 0xb7, 0xbd, 0x16, 0x57,
	0xf5, 0x6e, 0x4b, 0x2d, 0x78, 0xdf, 0x7b, 0x47, 0x66, 0xbf, 0xe1, 0x8c, 0xd7, 0xea, 0x42, 0xc9,
	0x5f, 0xa2, 0x70, 0xbb, 0x65, 0xbf, 0xbd, 0xb7, 0xfd, 0x60, 0x35, 0x5a, 0x9c, 0x1d, 0xbd, 0x8c,
	0x4f, 0xe4, 0xc1, 0x95, 0x9c, 0x42, 0xb4, 0x2c, 0x65, 0x98, 0x32, 0xe6, 0x51, 0x5e, 0xca, 0xd9,
	0xe7, 0xbb, 0xfe, 0x5f, 0xb0, 0xaa, 0xfc, 0x19, 0xbc, 0x82, 0x71, 0xae, 0x95, 0x13, 0x85, 0x42,
	0xbb, 0x2a, 0x64, 0x97, 0x74, 0xb4, 0xe7, 0x2e, 0x25, 0xa5, 0x70, 0x22, 0x85, 0x13, 0x9d, 0x55,
	0xa8, 0x17, 0x97, 0x30, 0x5c, 0x6a, 0x8b, 0xfc, 0xfb, 0x92, 0x7e, 0x00, 0xb8, 0xb5, 0xa5, 0x8f,
	0x7d, 0xb0, 0xa3, 0x67, 0x4c, 0xef, 0xd1, 0xdd, 0xf4, 0x8c, 0xbc, 0x26, 0xeb, 0x41, 0xb8, 0xf5,
	0x37, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x45, 0x7b, 0xe0, 0xf9, 0x02, 0x00, 0x00,
}
